import tkinter as tk       # arayüz oluşturmak için kullanılan kütüphanedir
from tkinter import messagebox  # kullanıcıya bilgi ya da hata mesajlarını söylemek için kullanılır

# sudokuyu çözmek için yardımcı fonksiyonlar 
def is_valid(board, row, col, num):
    # satır ve sütun kontrolü
    for i in range(9):
        if board[row][i] == num or board[i][col] == num:
            return False
    
    # 3x3 karenin kontrolü
    start_row, start_col = row - row % 3, col - col % 3
    for i in range(3):
        for a in range(3):
            if board[i + start_row][a + start_col] == num:
                return False
    return True

def solve_sudoku(board):
    for row in range(9):
        for col in range(9):
            if board[row][col] == 0:    # boş bir kutu bulma
                for num in range(1, 10):   # 1-9 arasındaki sayılarla deneme
                    if is_valid(board, row, col, num):
                        board[row][col] = num    # sayıyı yerleştirme
                        if solve_sudoku(board):  # rekürsif çözüm denemesi
                            return True
                        board[row][col] = 0    # başarısız olursa geri alma
                return False
    return True

# tkinter grafiksel kullanıcı arayüzü oluşturma 
def create_gui():
    root = tk.Tk()
    root.title("sudoku çözücü")

    # arayüzdeki giriş alanlarını ve çözüm kısmını oluşturma
    entries = [[None for _ in range(9)] for _ in range(9)]    
    result_label = tk.Label(root, text="", font=("Arial", 15)) 
    result_label.grid(row=10, columnspan=9, pady=10)

    # sudoku listesi oluşturma
    def submit_board():
        try:
            board = []
            for i in range(9):
                row = []
                for a in range(9):
                    value = entries[i][a].get()
                    row.append(int(value) if value else 0)
                board.append(row)
            if solve_sudoku(board):
                messagebox.showinfo("çözüm", "sudoku başarıyla çözüldü")
                result_label.config(text="çözüm: " + "\n".join([" ".join(str(num) for num in row) for row in board]))
                update_grid(board)
            else:
                 messagebox.showerror("hata", "bu sudoku için çözüm bulunamadı.")
                 result_label.config(text="çözüm bulunamadı.")
        except ValueError:
            messagebox.showerror("hatalı giriş", "lütfen geçerli sayılar girin")

    # listedeki her kutu için giriş alanları
    for i in range(9):
        for a in range(9):
            entries[i][a] = tk.Entry(root, width=3, font=("Arial", 20), borderwidth=2, relief="solid")
            entries[i][a].grid(row=i, column=a, padx=5, pady=5)

    # çözüm butonu
    submit_btn = tk.Button(root, text="sudokuyu çöz", command=submit_board)
    submit_btn.grid(row=9, columnspan=9, pady=10)

    # çözülen sudokunun gui üzerindeki kutulara yazdırılmasını sağlar
    def update_grid(board):
        for i in range(9):
            for a in range(9):
                entries[i][a].delete(0, tk.END)
                entries[i][a].insert(tk.END, str(board[i][a]) if board[i][a] !=0 else '')

    root.mainloop()

# fonksiyonu çagırarak gui arayüzünü başlatır
def main():
    create_gui()

# main fonksiyonu çağırılır ve gui başlatılır
if __name__ == "__main__":
    main()
